bad-machine-code

#########
= SPEC: =
#########

16 bit regs/instructions
8 regs (3 bit specifications)

Instruction Format:

OPC - Opcode
rs0 - Register to write to
rs1 - Register argument
rs2 - Register argument
S1  - Primary Function Selector
S2  - Secondary Function Selector
Imm - Immediate, scrambled around
	as necessary

########################
======= Formats: =======
########################

R Format:	OPC = 00

S2 rs2 rs1  S1 rs0 OPC
 |  |   |   |   |  |
FE|DCB|A98|765|432|10

~~~~~~~~~~~~~~~~~~~~~~~~

I Format:	OPC = 01

i[4-0]
  |   rs1  S1 rs0 OPC
  |    |   |   |  |
FEDCB|A98|765|432|10

~~~~~~~~~~~~~~~~~~~~~~~~

S Format:	OPC = 10

i[4-3]        i[2-0]
 | rs2 rs1  S1  |  OPC
 |  |   |   |   |  |
FE|DCB|A98|765|432|10

~~~~~~~~~~~~~~~~~~~~~~~~

U Format:	OPC = 11

  i[15-5]   rs0 OPC
     |       |  |
FEDCBA98765|432|10

~~~~~~~~~~~~~~~~~~~~~~~~

#################
= Instructions: =
#################

R : 00
======

000 | 00 : add	# rd = rs1 + rs2
000 | 01 : sub	# rd = rs1 - rs2

001 | 00 : slt	# rd = rs1 < rs2
001 | 01 : sltu # rd = rs1 < rs2 (rs2 unsigned)

010 | 00 : sll	# rd = rs1 << rs2

011 | 00 : sra	# rd = rs1 >> rs2 "sign bit in leftmost
011 | 01 : srl	# rd = rs1 >> rs2 "0's in leftmost

100 | 00 : or	# rd = rs1 OR rs2
100 | 01 : nor	# rd = ~(rs1 OR rs2)

101 | 00 : and	# rd = rs1 AND rs2
101 | 01 : nand	# rd = ~(rs1 AND rs2)

110 | 00 : xor	# rd = rs1 XOR rs2
110 | 01 : xnor	# rd = ~(rs1 XOR rs2)

111 | 00 : mul  # rd = [rs1 * rs2](31-0) 
111 | 01 : mulh # rd = [rs1 * rs2](63-32)
111 | 10 : div	# rd = rs1 / rs2
111 | 11 : rem	# rd = rem(rs1 / rs2)

I : 01
======
000 : addi	# rd = rs1 + imm
001 : slti	# rd = rs1 < imm
010 : slli	# rd = rsi << imm
011 : srai	# rd = rsi >> imm "sign bit in leftmost
100 : ori 	# rd = rsi OR imm
101 : andi	# rd = rsi AND imm
110 : xori	# rd = rsi XOR imm
111 : lw	# rd = RAM(rs1 + imm);


S : 10
======
000 : sw	# RAM(rs1 + imm) = rs2


U : 11
======
lui			# rd = imm << 5

